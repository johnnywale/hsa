/* tslint:disable */
/* eslint-disable */
/**
 * SRE DynamoDB Table definition - OpenAPI 3.0
 * DynamoDB Data doc for SRE Project
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface IngestionJob
 */
export interface IngestionJob {
    /**
     * 
     * @type {string}
     * @memberof IngestionJob
     */
    documentId: string;
    /**
     * 
     * @type {string}
     * @memberof IngestionJob
     */
    errorMessage?: string;
    /**
     * 
     * @type {Date}
     * @memberof IngestionJob
     */
    finishedAt?: Date;
    /**
     * 
     * @type {number}
     * @memberof IngestionJob
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof IngestionJob
     */
    retryCount?: number;
    /**
     * 
     * @type {Date}
     * @memberof IngestionJob
     */
    startedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof IngestionJob
     */
    status: string;
    /**
     * 
     * @type {string}
     * @memberof IngestionJob
     */
    userId?: string;
}

/**
 * Check if a given object implements the IngestionJob interface.
 */
export function instanceOfIngestionJob(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "documentId" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "status" in value;

    return isInstance;
}

export function IngestionJobFromJSON(json: any): IngestionJob {
    return IngestionJobFromJSONTyped(json, false);
}

export function IngestionJobFromJSONTyped(json: any, ignoreDiscriminator: boolean): IngestionJob {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'documentId': json['documentId'],
        'errorMessage': !exists(json, 'errorMessage') ? undefined : json['errorMessage'],
        'finishedAt': !exists(json, 'finishedAt') ? undefined : (new Date(json['finishedAt'])),
        'id': json['id'],
        'retryCount': !exists(json, 'retryCount') ? undefined : json['retryCount'],
        'startedAt': !exists(json, 'startedAt') ? undefined : (new Date(json['startedAt'])),
        'status': json['status'],
        'userId': !exists(json, 'userId') ? undefined : json['userId'],
    };
}

export function IngestionJobToJSON(value?: IngestionJob | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'documentId': value.documentId,
        'errorMessage': value.errorMessage,
        'finishedAt': value.finishedAt === undefined ? undefined : (value.finishedAt.toISOString()),
        'id': value.id,
        'retryCount': value.retryCount,
        'startedAt': value.startedAt === undefined ? undefined : (value.startedAt.toISOString()),
        'status': value.status,
        'userId': value.userId,
    };
}

