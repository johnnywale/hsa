/* tslint:disable */
/* eslint-disable */
/**
 * SRE DynamoDB Table definition - OpenAPI 3.0
 * DynamoDB Data doc for SRE Project
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetQueryChunkMatchList200Response,
  QueryChunkMatch,
  QueryChunkMatchCreate,
} from '../models';
import {
    GetQueryChunkMatchList200ResponseFromJSON,
    GetQueryChunkMatchList200ResponseToJSON,
    QueryChunkMatchFromJSON,
    QueryChunkMatchToJSON,
    QueryChunkMatchCreateFromJSON,
    QueryChunkMatchCreateToJSON,
} from '../models';

export interface CreateQueryChunkMatchRequest {
    queryChunkMatchCreate: QueryChunkMatchCreate;
}

export interface DeleteQueryChunkMatchRequest {
    entityId: number;
}

export interface GetQueryChunkMatchByIdRequest {
    entityId: number;
}

export interface GetQueryChunkMatchListRequest {
    queryChunkMatchId?: number;
    filters?: string;
    orderBy?: string;
    order?: GetQueryChunkMatchListOrderEnum;
    page?: number;
    pageSize?: number;
    indexName?: string;
}

/**
 * 
 */
export class QueryChunkMatchApi extends runtime.BaseAPI {

    /**
     * Create a new query-chunk-match
     */
    async createQueryChunkMatchRaw(requestParameters: CreateQueryChunkMatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QueryChunkMatch>> {
        if (requestParameters.queryChunkMatchCreate === null || requestParameters.queryChunkMatchCreate === undefined) {
            throw new runtime.RequiredError('queryChunkMatchCreate','Required parameter requestParameters.queryChunkMatchCreate was null or undefined when calling createQueryChunkMatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bearerAuth", ["query-chunk-match:w"]);
        }

        const response = await this.request({
            path: `/query-chunk-match`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QueryChunkMatchCreateToJSON(requestParameters.queryChunkMatchCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QueryChunkMatchFromJSON(jsonValue));
    }

    /**
     * Create a new query-chunk-match
     */
    async createQueryChunkMatch(requestParameters: CreateQueryChunkMatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QueryChunkMatch> {
        const response = await this.createQueryChunkMatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a single query-chunk-match by ID
     */
    async deleteQueryChunkMatchRaw(requestParameters: DeleteQueryChunkMatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QueryChunkMatch>> {
        if (requestParameters.entityId === null || requestParameters.entityId === undefined) {
            throw new runtime.RequiredError('entityId','Required parameter requestParameters.entityId was null or undefined when calling deleteQueryChunkMatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bearerAuth", ["query-chunk-match:w"]);
        }

        const response = await this.request({
            path: `/query-chunk-match/{entity_id}`.replace(`{${"entity_id"}}`, encodeURIComponent(String(requestParameters.entityId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QueryChunkMatchFromJSON(jsonValue));
    }

    /**
     * Delete a single query-chunk-match by ID
     */
    async deleteQueryChunkMatch(requestParameters: DeleteQueryChunkMatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QueryChunkMatch> {
        const response = await this.deleteQueryChunkMatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a single query-chunk-match by ID
     */
    async getQueryChunkMatchByIdRaw(requestParameters: GetQueryChunkMatchByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QueryChunkMatch>> {
        if (requestParameters.entityId === null || requestParameters.entityId === undefined) {
            throw new runtime.RequiredError('entityId','Required parameter requestParameters.entityId was null or undefined when calling getQueryChunkMatchById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bearerAuth", ["query-chunk-match:r"]);
        }

        const response = await this.request({
            path: `/query-chunk-match/{entity_id}`.replace(`{${"entity_id"}}`, encodeURIComponent(String(requestParameters.entityId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QueryChunkMatchFromJSON(jsonValue));
    }

    /**
     * Get a single query-chunk-match by ID
     */
    async getQueryChunkMatchById(requestParameters: GetQueryChunkMatchByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QueryChunkMatch> {
        const response = await this.getQueryChunkMatchByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of query-chunk-matchs
     */
    async getQueryChunkMatchListRaw(requestParameters: GetQueryChunkMatchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetQueryChunkMatchList200Response>> {
        const queryParameters: any = {};

        if (requestParameters.queryChunkMatchId !== undefined) {
            queryParameters['query-chunk-match_id'] = requestParameters.queryChunkMatchId;
        }

        if (requestParameters.filters !== undefined) {
            queryParameters['filters'] = requestParameters.filters;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['order_by'] = requestParameters.orderBy;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.indexName !== undefined) {
            queryParameters['index_name'] = requestParameters.indexName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bearerAuth", ["query-chunk-match:r"]);
        }

        const response = await this.request({
            path: `/query-chunk-match`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetQueryChunkMatchList200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of query-chunk-matchs
     */
    async getQueryChunkMatchList(requestParameters: GetQueryChunkMatchListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetQueryChunkMatchList200Response> {
        const response = await this.getQueryChunkMatchListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetQueryChunkMatchListOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type GetQueryChunkMatchListOrderEnum = typeof GetQueryChunkMatchListOrderEnum[keyof typeof GetQueryChunkMatchListOrderEnum];
