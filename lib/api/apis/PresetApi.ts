/* tslint:disable */
/* eslint-disable */
/**
 * SRE DynamoDB Table definition - OpenAPI 3.0
 * DynamoDB Data doc for SRE Project
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetPresetList200Response,
  Preset,
  PresetCreate,
} from '../models';
import {
    GetPresetList200ResponseFromJSON,
    GetPresetList200ResponseToJSON,
    PresetFromJSON,
    PresetToJSON,
    PresetCreateFromJSON,
    PresetCreateToJSON,
} from '../models';

export interface CreatePresetRequest {
    presetCreate: PresetCreate;
}

export interface DeletePresetRequest {
    entityId: number;
}

export interface GetPresetByIdRequest {
    entityId: number;
}

export interface GetPresetListRequest {
    presetId?: number;
    filters?: string;
    orderBy?: string;
    order?: GetPresetListOrderEnum;
    page?: number;
    pageSize?: number;
    indexName?: string;
}

/**
 * 
 */
export class PresetApi extends runtime.BaseAPI {

    /**
     * Create a new preset
     */
    async createPresetRaw(requestParameters: CreatePresetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Preset>> {
        if (requestParameters.presetCreate === null || requestParameters.presetCreate === undefined) {
            throw new runtime.RequiredError('presetCreate','Required parameter requestParameters.presetCreate was null or undefined when calling createPreset.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bearerAuth", ["preset:w"]);
        }

        const response = await this.request({
            path: `/preset`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PresetCreateToJSON(requestParameters.presetCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PresetFromJSON(jsonValue));
    }

    /**
     * Create a new preset
     */
    async createPreset(requestParameters: CreatePresetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Preset> {
        const response = await this.createPresetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a single preset by ID
     */
    async deletePresetRaw(requestParameters: DeletePresetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Preset>> {
        if (requestParameters.entityId === null || requestParameters.entityId === undefined) {
            throw new runtime.RequiredError('entityId','Required parameter requestParameters.entityId was null or undefined when calling deletePreset.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bearerAuth", ["preset:w"]);
        }

        const response = await this.request({
            path: `/preset/{entity_id}`.replace(`{${"entity_id"}}`, encodeURIComponent(String(requestParameters.entityId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PresetFromJSON(jsonValue));
    }

    /**
     * Delete a single preset by ID
     */
    async deletePreset(requestParameters: DeletePresetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Preset> {
        const response = await this.deletePresetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a single preset by ID
     */
    async getPresetByIdRaw(requestParameters: GetPresetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Preset>> {
        if (requestParameters.entityId === null || requestParameters.entityId === undefined) {
            throw new runtime.RequiredError('entityId','Required parameter requestParameters.entityId was null or undefined when calling getPresetById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bearerAuth", ["preset:r"]);
        }

        const response = await this.request({
            path: `/preset/{entity_id}`.replace(`{${"entity_id"}}`, encodeURIComponent(String(requestParameters.entityId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PresetFromJSON(jsonValue));
    }

    /**
     * Get a single preset by ID
     */
    async getPresetById(requestParameters: GetPresetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Preset> {
        const response = await this.getPresetByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of presets
     */
    async getPresetListRaw(requestParameters: GetPresetListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPresetList200Response>> {
        const queryParameters: any = {};

        if (requestParameters.presetId !== undefined) {
            queryParameters['preset_id'] = requestParameters.presetId;
        }

        if (requestParameters.filters !== undefined) {
            queryParameters['filters'] = requestParameters.filters;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['order_by'] = requestParameters.orderBy;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.indexName !== undefined) {
            queryParameters['index_name'] = requestParameters.indexName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bearerAuth", ["preset:r"]);
        }

        const response = await this.request({
            path: `/preset`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPresetList200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of presets
     */
    async getPresetList(requestParameters: GetPresetListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPresetList200Response> {
        const response = await this.getPresetListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetPresetListOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type GetPresetListOrderEnum = typeof GetPresetListOrderEnum[keyof typeof GetPresetListOrderEnum];
