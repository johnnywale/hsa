/* tslint:disable */
/* eslint-disable */
/**
 * SRE DynamoDB Table definition - OpenAPI 3.0
 * DynamoDB Data doc for SRE Project
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Document,
  DocumentCreate,
  GetDocumentList200Response,
} from '../models';
import {
    DocumentFromJSON,
    DocumentToJSON,
    DocumentCreateFromJSON,
    DocumentCreateToJSON,
    GetDocumentList200ResponseFromJSON,
    GetDocumentList200ResponseToJSON,
} from '../models';

export interface CreateDocumentRequest {
    documentCreate: DocumentCreate;
}

export interface DeleteDocumentRequest {
    entityId: number;
}

export interface GetDocumentByIdRequest {
    entityId: number;
}

export interface GetDocumentListRequest {
    documentId?: number;
    filters?: string;
    orderBy?: string;
    order?: GetDocumentListOrderEnum;
    page?: number;
    pageSize?: number;
    indexName?: string;
}

/**
 * 
 */
export class DocumentApi extends runtime.BaseAPI {

    /**
     * Create a new document
     */
    async createDocumentRaw(requestParameters: CreateDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Document>> {
        if (requestParameters.documentCreate === null || requestParameters.documentCreate === undefined) {
            throw new runtime.RequiredError('documentCreate','Required parameter requestParameters.documentCreate was null or undefined when calling createDocument.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bearerAuth", ["document:w"]);
        }

        const response = await this.request({
            path: `/document`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DocumentCreateToJSON(requestParameters.documentCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentFromJSON(jsonValue));
    }

    /**
     * Create a new document
     */
    async createDocument(requestParameters: CreateDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Document> {
        const response = await this.createDocumentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a single document by ID
     */
    async deleteDocumentRaw(requestParameters: DeleteDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Document>> {
        if (requestParameters.entityId === null || requestParameters.entityId === undefined) {
            throw new runtime.RequiredError('entityId','Required parameter requestParameters.entityId was null or undefined when calling deleteDocument.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bearerAuth", ["document:w"]);
        }

        const response = await this.request({
            path: `/document/{entity_id}`.replace(`{${"entity_id"}}`, encodeURIComponent(String(requestParameters.entityId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentFromJSON(jsonValue));
    }

    /**
     * Delete a single document by ID
     */
    async deleteDocument(requestParameters: DeleteDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Document> {
        const response = await this.deleteDocumentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a single document by ID
     */
    async getDocumentByIdRaw(requestParameters: GetDocumentByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Document>> {
        if (requestParameters.entityId === null || requestParameters.entityId === undefined) {
            throw new runtime.RequiredError('entityId','Required parameter requestParameters.entityId was null or undefined when calling getDocumentById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bearerAuth", ["document:r"]);
        }

        const response = await this.request({
            path: `/document/{entity_id}`.replace(`{${"entity_id"}}`, encodeURIComponent(String(requestParameters.entityId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentFromJSON(jsonValue));
    }

    /**
     * Get a single document by ID
     */
    async getDocumentById(requestParameters: GetDocumentByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Document> {
        const response = await this.getDocumentByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of documents
     */
    async getDocumentListRaw(requestParameters: GetDocumentListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetDocumentList200Response>> {
        const queryParameters: any = {};

        if (requestParameters.documentId !== undefined) {
            queryParameters['document_id'] = requestParameters.documentId;
        }

        if (requestParameters.filters !== undefined) {
            queryParameters['filters'] = requestParameters.filters;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['order_by'] = requestParameters.orderBy;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.indexName !== undefined) {
            queryParameters['index_name'] = requestParameters.indexName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bearerAuth", ["document:r"]);
        }

        const response = await this.request({
            path: `/document`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetDocumentList200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of documents
     */
    async getDocumentList(requestParameters: GetDocumentListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetDocumentList200Response> {
        const response = await this.getDocumentListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetDocumentListOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type GetDocumentListOrderEnum = typeof GetDocumentListOrderEnum[keyof typeof GetDocumentListOrderEnum];
