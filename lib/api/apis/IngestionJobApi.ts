/* tslint:disable */
/* eslint-disable */
/**
 * SRE DynamoDB Table definition - OpenAPI 3.0
 * DynamoDB Data doc for SRE Project
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetIngestionJobList200Response,
  IngestionJob,
  IngestionJobCreate,
} from '../models';
import {
    GetIngestionJobList200ResponseFromJSON,
    GetIngestionJobList200ResponseToJSON,
    IngestionJobFromJSON,
    IngestionJobToJSON,
    IngestionJobCreateFromJSON,
    IngestionJobCreateToJSON,
} from '../models';

export interface CreateIngestionJobRequest {
    ingestionJobCreate: IngestionJobCreate;
}

export interface DeleteIngestionJobRequest {
    entityId: number;
}

export interface GetIngestionJobByIdRequest {
    entityId: number;
}

export interface GetIngestionJobListRequest {
    ingestionJobId?: number;
    filters?: string;
    orderBy?: string;
    order?: GetIngestionJobListOrderEnum;
    page?: number;
    pageSize?: number;
    indexName?: string;
}

/**
 * 
 */
export class IngestionJobApi extends runtime.BaseAPI {

    /**
     * Create a new ingestion-job
     */
    async createIngestionJobRaw(requestParameters: CreateIngestionJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IngestionJob>> {
        if (requestParameters.ingestionJobCreate === null || requestParameters.ingestionJobCreate === undefined) {
            throw new runtime.RequiredError('ingestionJobCreate','Required parameter requestParameters.ingestionJobCreate was null or undefined when calling createIngestionJob.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bearerAuth", ["ingestion-job:w"]);
        }

        const response = await this.request({
            path: `/ingestion-job`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IngestionJobCreateToJSON(requestParameters.ingestionJobCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IngestionJobFromJSON(jsonValue));
    }

    /**
     * Create a new ingestion-job
     */
    async createIngestionJob(requestParameters: CreateIngestionJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IngestionJob> {
        const response = await this.createIngestionJobRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a single ingestion-job by ID
     */
    async deleteIngestionJobRaw(requestParameters: DeleteIngestionJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IngestionJob>> {
        if (requestParameters.entityId === null || requestParameters.entityId === undefined) {
            throw new runtime.RequiredError('entityId','Required parameter requestParameters.entityId was null or undefined when calling deleteIngestionJob.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bearerAuth", ["ingestion-job:w"]);
        }

        const response = await this.request({
            path: `/ingestion-job/{entity_id}`.replace(`{${"entity_id"}}`, encodeURIComponent(String(requestParameters.entityId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IngestionJobFromJSON(jsonValue));
    }

    /**
     * Delete a single ingestion-job by ID
     */
    async deleteIngestionJob(requestParameters: DeleteIngestionJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IngestionJob> {
        const response = await this.deleteIngestionJobRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a single ingestion-job by ID
     */
    async getIngestionJobByIdRaw(requestParameters: GetIngestionJobByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IngestionJob>> {
        if (requestParameters.entityId === null || requestParameters.entityId === undefined) {
            throw new runtime.RequiredError('entityId','Required parameter requestParameters.entityId was null or undefined when calling getIngestionJobById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bearerAuth", ["ingestion-job:r"]);
        }

        const response = await this.request({
            path: `/ingestion-job/{entity_id}`.replace(`{${"entity_id"}}`, encodeURIComponent(String(requestParameters.entityId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IngestionJobFromJSON(jsonValue));
    }

    /**
     * Get a single ingestion-job by ID
     */
    async getIngestionJobById(requestParameters: GetIngestionJobByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IngestionJob> {
        const response = await this.getIngestionJobByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of ingestion-jobs
     */
    async getIngestionJobListRaw(requestParameters: GetIngestionJobListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetIngestionJobList200Response>> {
        const queryParameters: any = {};

        if (requestParameters.ingestionJobId !== undefined) {
            queryParameters['ingestion-job_id'] = requestParameters.ingestionJobId;
        }

        if (requestParameters.filters !== undefined) {
            queryParameters['filters'] = requestParameters.filters;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['order_by'] = requestParameters.orderBy;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.indexName !== undefined) {
            queryParameters['index_name'] = requestParameters.indexName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bearerAuth", ["ingestion-job:r"]);
        }

        const response = await this.request({
            path: `/ingestion-job`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetIngestionJobList200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of ingestion-jobs
     */
    async getIngestionJobList(requestParameters: GetIngestionJobListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetIngestionJobList200Response> {
        const response = await this.getIngestionJobListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetIngestionJobListOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type GetIngestionJobListOrderEnum = typeof GetIngestionJobListOrderEnum[keyof typeof GetIngestionJobListOrderEnum];
