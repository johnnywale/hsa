/* tslint:disable */
/* eslint-disable */
/**
 * SRE DynamoDB Table definition - OpenAPI 3.0
 * DynamoDB Data doc for SRE Project
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChatHistory,
  ChatHistoryCreate,
  GetChatHistoryList200Response,
} from '../models';
import {
    ChatHistoryFromJSON,
    ChatHistoryToJSON,
    ChatHistoryCreateFromJSON,
    ChatHistoryCreateToJSON,
    GetChatHistoryList200ResponseFromJSON,
    GetChatHistoryList200ResponseToJSON,
} from '../models';

export interface CreateChatHistoryRequest {
    chatHistoryCreate: ChatHistoryCreate;
}

export interface DeleteChatHistoryRequest {
    entityId: number;
}

export interface GetChatHistoryByIdRequest {
    entityId: number;
}

export interface GetChatHistoryListRequest {
    chatHistoryId?: number;
    filters?: string;
    orderBy?: string;
    order?: GetChatHistoryListOrderEnum;
    page?: number;
    pageSize?: number;
    indexName?: string;
}

/**
 * 
 */
export class ChatHistoryApi extends runtime.BaseAPI {

    /**
     * Create a new chat-history
     */
    async createChatHistoryRaw(requestParameters: CreateChatHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChatHistory>> {
        if (requestParameters.chatHistoryCreate === null || requestParameters.chatHistoryCreate === undefined) {
            throw new runtime.RequiredError('chatHistoryCreate','Required parameter requestParameters.chatHistoryCreate was null or undefined when calling createChatHistory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bearerAuth", ["chat-history:w"]);
        }

        const response = await this.request({
            path: `/chat-history`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChatHistoryCreateToJSON(requestParameters.chatHistoryCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChatHistoryFromJSON(jsonValue));
    }

    /**
     * Create a new chat-history
     */
    async createChatHistory(requestParameters: CreateChatHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChatHistory> {
        const response = await this.createChatHistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a single chat-history by ID
     */
    async deleteChatHistoryRaw(requestParameters: DeleteChatHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChatHistory>> {
        if (requestParameters.entityId === null || requestParameters.entityId === undefined) {
            throw new runtime.RequiredError('entityId','Required parameter requestParameters.entityId was null or undefined when calling deleteChatHistory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bearerAuth", ["chat-history:w"]);
        }

        const response = await this.request({
            path: `/chat-history/{entity_id}`.replace(`{${"entity_id"}}`, encodeURIComponent(String(requestParameters.entityId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChatHistoryFromJSON(jsonValue));
    }

    /**
     * Delete a single chat-history by ID
     */
    async deleteChatHistory(requestParameters: DeleteChatHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChatHistory> {
        const response = await this.deleteChatHistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a single chat-history by ID
     */
    async getChatHistoryByIdRaw(requestParameters: GetChatHistoryByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChatHistory>> {
        if (requestParameters.entityId === null || requestParameters.entityId === undefined) {
            throw new runtime.RequiredError('entityId','Required parameter requestParameters.entityId was null or undefined when calling getChatHistoryById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bearerAuth", ["chat-history:r"]);
        }

        const response = await this.request({
            path: `/chat-history/{entity_id}`.replace(`{${"entity_id"}}`, encodeURIComponent(String(requestParameters.entityId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChatHistoryFromJSON(jsonValue));
    }

    /**
     * Get a single chat-history by ID
     */
    async getChatHistoryById(requestParameters: GetChatHistoryByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChatHistory> {
        const response = await this.getChatHistoryByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of chat-historys
     */
    async getChatHistoryListRaw(requestParameters: GetChatHistoryListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetChatHistoryList200Response>> {
        const queryParameters: any = {};

        if (requestParameters.chatHistoryId !== undefined) {
            queryParameters['chat-history_id'] = requestParameters.chatHistoryId;
        }

        if (requestParameters.filters !== undefined) {
            queryParameters['filters'] = requestParameters.filters;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['order_by'] = requestParameters.orderBy;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.indexName !== undefined) {
            queryParameters['index_name'] = requestParameters.indexName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bearerAuth", ["chat-history:r"]);
        }

        const response = await this.request({
            path: `/chat-history`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetChatHistoryList200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of chat-historys
     */
    async getChatHistoryList(requestParameters: GetChatHistoryListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetChatHistoryList200Response> {
        const response = await this.getChatHistoryListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetChatHistoryListOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type GetChatHistoryListOrderEnum = typeof GetChatHistoryListOrderEnum[keyof typeof GetChatHistoryListOrderEnum];
