/* tslint:disable */
/* eslint-disable */
/**
 * SRE DynamoDB Table definition - OpenAPI 3.0
 * DynamoDB Data doc for SRE Project
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetQueryList200Response,
  Query,
  QueryCreate,
} from '../models';
import {
    GetQueryList200ResponseFromJSON,
    GetQueryList200ResponseToJSON,
    QueryFromJSON,
    QueryToJSON,
    QueryCreateFromJSON,
    QueryCreateToJSON,
} from '../models';

export interface CreateQueryRequest {
    queryCreate: QueryCreate;
}

export interface DeleteQueryRequest {
    entityId: number;
}

export interface GetQueryByIdRequest {
    entityId: number;
}

export interface GetQueryListRequest {
    queryId?: number;
    filters?: string;
    orderBy?: string;
    order?: GetQueryListOrderEnum;
    page?: number;
    pageSize?: number;
    indexName?: string;
}

/**
 * 
 */
export class QueryApi extends runtime.BaseAPI {

    /**
     * Create a new query
     */
    async createQueryRaw(requestParameters: CreateQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Query>> {
        if (requestParameters.queryCreate === null || requestParameters.queryCreate === undefined) {
            throw new runtime.RequiredError('queryCreate','Required parameter requestParameters.queryCreate was null or undefined when calling createQuery.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bearerAuth", ["query:w"]);
        }

        const response = await this.request({
            path: `/query`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QueryCreateToJSON(requestParameters.queryCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QueryFromJSON(jsonValue));
    }

    /**
     * Create a new query
     */
    async createQuery(requestParameters: CreateQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Query> {
        const response = await this.createQueryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a single query by ID
     */
    async deleteQueryRaw(requestParameters: DeleteQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Query>> {
        if (requestParameters.entityId === null || requestParameters.entityId === undefined) {
            throw new runtime.RequiredError('entityId','Required parameter requestParameters.entityId was null or undefined when calling deleteQuery.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bearerAuth", ["query:w"]);
        }

        const response = await this.request({
            path: `/query/{entity_id}`.replace(`{${"entity_id"}}`, encodeURIComponent(String(requestParameters.entityId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QueryFromJSON(jsonValue));
    }

    /**
     * Delete a single query by ID
     */
    async deleteQuery(requestParameters: DeleteQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Query> {
        const response = await this.deleteQueryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a single query by ID
     */
    async getQueryByIdRaw(requestParameters: GetQueryByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Query>> {
        if (requestParameters.entityId === null || requestParameters.entityId === undefined) {
            throw new runtime.RequiredError('entityId','Required parameter requestParameters.entityId was null or undefined when calling getQueryById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bearerAuth", ["query:r"]);
        }

        const response = await this.request({
            path: `/query/{entity_id}`.replace(`{${"entity_id"}}`, encodeURIComponent(String(requestParameters.entityId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QueryFromJSON(jsonValue));
    }

    /**
     * Get a single query by ID
     */
    async getQueryById(requestParameters: GetQueryByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Query> {
        const response = await this.getQueryByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of querys
     */
    async getQueryListRaw(requestParameters: GetQueryListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetQueryList200Response>> {
        const queryParameters: any = {};

        if (requestParameters.queryId !== undefined) {
            queryParameters['query_id'] = requestParameters.queryId;
        }

        if (requestParameters.filters !== undefined) {
            queryParameters['filters'] = requestParameters.filters;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['order_by'] = requestParameters.orderBy;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.indexName !== undefined) {
            queryParameters['index_name'] = requestParameters.indexName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bearerAuth", ["query:r"]);
        }

        const response = await this.request({
            path: `/query`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetQueryList200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of querys
     */
    async getQueryList(requestParameters: GetQueryListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetQueryList200Response> {
        const response = await this.getQueryListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetQueryListOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type GetQueryListOrderEnum = typeof GetQueryListOrderEnum[keyof typeof GetQueryListOrderEnum];
