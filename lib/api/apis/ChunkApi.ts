/* tslint:disable */
/* eslint-disable */
/**
 * SRE DynamoDB Table definition - OpenAPI 3.0
 * DynamoDB Data doc for SRE Project
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Chunk,
  ChunkCreate,
  GetChunkList200Response,
} from '../models';
import {
    ChunkFromJSON,
    ChunkToJSON,
    ChunkCreateFromJSON,
    ChunkCreateToJSON,
    GetChunkList200ResponseFromJSON,
    GetChunkList200ResponseToJSON,
} from '../models';

export interface CreateChunkRequest {
    chunkCreate: ChunkCreate;
}

export interface DeleteChunkRequest {
    entityId: number;
}

export interface GetChunkByIdRequest {
    entityId: number;
}

export interface GetChunkListRequest {
    chunkId?: number;
    filters?: string;
    orderBy?: string;
    order?: GetChunkListOrderEnum;
    page?: number;
    pageSize?: number;
    indexName?: string;
}

/**
 * 
 */
export class ChunkApi extends runtime.BaseAPI {

    /**
     * Create a new chunk
     */
    async createChunkRaw(requestParameters: CreateChunkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Chunk>> {
        if (requestParameters.chunkCreate === null || requestParameters.chunkCreate === undefined) {
            throw new runtime.RequiredError('chunkCreate','Required parameter requestParameters.chunkCreate was null or undefined when calling createChunk.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bearerAuth", ["chunk:w"]);
        }

        const response = await this.request({
            path: `/chunk`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChunkCreateToJSON(requestParameters.chunkCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChunkFromJSON(jsonValue));
    }

    /**
     * Create a new chunk
     */
    async createChunk(requestParameters: CreateChunkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Chunk> {
        const response = await this.createChunkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a single chunk by ID
     */
    async deleteChunkRaw(requestParameters: DeleteChunkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Chunk>> {
        if (requestParameters.entityId === null || requestParameters.entityId === undefined) {
            throw new runtime.RequiredError('entityId','Required parameter requestParameters.entityId was null or undefined when calling deleteChunk.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bearerAuth", ["chunk:w"]);
        }

        const response = await this.request({
            path: `/chunk/{entity_id}`.replace(`{${"entity_id"}}`, encodeURIComponent(String(requestParameters.entityId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChunkFromJSON(jsonValue));
    }

    /**
     * Delete a single chunk by ID
     */
    async deleteChunk(requestParameters: DeleteChunkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Chunk> {
        const response = await this.deleteChunkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a single chunk by ID
     */
    async getChunkByIdRaw(requestParameters: GetChunkByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Chunk>> {
        if (requestParameters.entityId === null || requestParameters.entityId === undefined) {
            throw new runtime.RequiredError('entityId','Required parameter requestParameters.entityId was null or undefined when calling getChunkById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bearerAuth", ["chunk:r"]);
        }

        const response = await this.request({
            path: `/chunk/{entity_id}`.replace(`{${"entity_id"}}`, encodeURIComponent(String(requestParameters.entityId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChunkFromJSON(jsonValue));
    }

    /**
     * Get a single chunk by ID
     */
    async getChunkById(requestParameters: GetChunkByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Chunk> {
        const response = await this.getChunkByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of chunks
     */
    async getChunkListRaw(requestParameters: GetChunkListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetChunkList200Response>> {
        const queryParameters: any = {};

        if (requestParameters.chunkId !== undefined) {
            queryParameters['chunk_id'] = requestParameters.chunkId;
        }

        if (requestParameters.filters !== undefined) {
            queryParameters['filters'] = requestParameters.filters;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['order_by'] = requestParameters.orderBy;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.indexName !== undefined) {
            queryParameters['index_name'] = requestParameters.indexName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bearerAuth", ["chunk:r"]);
        }

        const response = await this.request({
            path: `/chunk`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetChunkList200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of chunks
     */
    async getChunkList(requestParameters: GetChunkListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetChunkList200Response> {
        const response = await this.getChunkListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetChunkListOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type GetChunkListOrderEnum = typeof GetChunkListOrderEnum[keyof typeof GetChunkListOrderEnum];
