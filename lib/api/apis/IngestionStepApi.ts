/* tslint:disable */
/* eslint-disable */
/**
 * SRE DynamoDB Table definition - OpenAPI 3.0
 * DynamoDB Data doc for SRE Project
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetIngestionStepList200Response,
  IngestionStep,
  IngestionStepCreate,
} from '../models';
import {
    GetIngestionStepList200ResponseFromJSON,
    GetIngestionStepList200ResponseToJSON,
    IngestionStepFromJSON,
    IngestionStepToJSON,
    IngestionStepCreateFromJSON,
    IngestionStepCreateToJSON,
} from '../models';

export interface CreateIngestionStepRequest {
    ingestionStepCreate: IngestionStepCreate;
}

export interface DeleteIngestionStepRequest {
    entityId: number;
}

export interface GetIngestionStepByIdRequest {
    entityId: number;
}

export interface GetIngestionStepListRequest {
    ingestionStepId?: number;
    filters?: string;
    orderBy?: string;
    order?: GetIngestionStepListOrderEnum;
    page?: number;
    pageSize?: number;
    indexName?: string;
}

/**
 * 
 */
export class IngestionStepApi extends runtime.BaseAPI {

    /**
     * Create a new ingestion-step
     */
    async createIngestionStepRaw(requestParameters: CreateIngestionStepRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IngestionStep>> {
        if (requestParameters.ingestionStepCreate === null || requestParameters.ingestionStepCreate === undefined) {
            throw new runtime.RequiredError('ingestionStepCreate','Required parameter requestParameters.ingestionStepCreate was null or undefined when calling createIngestionStep.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bearerAuth", ["ingestion-step:w"]);
        }

        const response = await this.request({
            path: `/ingestion-step`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IngestionStepCreateToJSON(requestParameters.ingestionStepCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IngestionStepFromJSON(jsonValue));
    }

    /**
     * Create a new ingestion-step
     */
    async createIngestionStep(requestParameters: CreateIngestionStepRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IngestionStep> {
        const response = await this.createIngestionStepRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a single ingestion-step by ID
     */
    async deleteIngestionStepRaw(requestParameters: DeleteIngestionStepRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IngestionStep>> {
        if (requestParameters.entityId === null || requestParameters.entityId === undefined) {
            throw new runtime.RequiredError('entityId','Required parameter requestParameters.entityId was null or undefined when calling deleteIngestionStep.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bearerAuth", ["ingestion-step:w"]);
        }

        const response = await this.request({
            path: `/ingestion-step/{entity_id}`.replace(`{${"entity_id"}}`, encodeURIComponent(String(requestParameters.entityId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IngestionStepFromJSON(jsonValue));
    }

    /**
     * Delete a single ingestion-step by ID
     */
    async deleteIngestionStep(requestParameters: DeleteIngestionStepRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IngestionStep> {
        const response = await this.deleteIngestionStepRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a single ingestion-step by ID
     */
    async getIngestionStepByIdRaw(requestParameters: GetIngestionStepByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IngestionStep>> {
        if (requestParameters.entityId === null || requestParameters.entityId === undefined) {
            throw new runtime.RequiredError('entityId','Required parameter requestParameters.entityId was null or undefined when calling getIngestionStepById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bearerAuth", ["ingestion-step:r"]);
        }

        const response = await this.request({
            path: `/ingestion-step/{entity_id}`.replace(`{${"entity_id"}}`, encodeURIComponent(String(requestParameters.entityId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IngestionStepFromJSON(jsonValue));
    }

    /**
     * Get a single ingestion-step by ID
     */
    async getIngestionStepById(requestParameters: GetIngestionStepByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IngestionStep> {
        const response = await this.getIngestionStepByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of ingestion-steps
     */
    async getIngestionStepListRaw(requestParameters: GetIngestionStepListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetIngestionStepList200Response>> {
        const queryParameters: any = {};

        if (requestParameters.ingestionStepId !== undefined) {
            queryParameters['ingestion-step_id'] = requestParameters.ingestionStepId;
        }

        if (requestParameters.filters !== undefined) {
            queryParameters['filters'] = requestParameters.filters;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['order_by'] = requestParameters.orderBy;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.indexName !== undefined) {
            queryParameters['index_name'] = requestParameters.indexName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bearerAuth", ["ingestion-step:r"]);
        }

        const response = await this.request({
            path: `/ingestion-step`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetIngestionStepList200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of ingestion-steps
     */
    async getIngestionStepList(requestParameters: GetIngestionStepListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetIngestionStepList200Response> {
        const response = await this.getIngestionStepListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetIngestionStepListOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type GetIngestionStepListOrderEnum = typeof GetIngestionStepListOrderEnum[keyof typeof GetIngestionStepListOrderEnum];
