/* tslint:disable */
/* eslint-disable */
/**
 * SRE DynamoDB Table definition - OpenAPI 3.0
 * DynamoDB Data doc for SRE Project
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Embedding,
  EmbeddingCreate,
  GetEmbeddingList200Response,
} from '../models';
import {
    EmbeddingFromJSON,
    EmbeddingToJSON,
    EmbeddingCreateFromJSON,
    EmbeddingCreateToJSON,
    GetEmbeddingList200ResponseFromJSON,
    GetEmbeddingList200ResponseToJSON,
} from '../models';

export interface CreateEmbeddingRequest {
    embeddingCreate: EmbeddingCreate;
}

export interface DeleteEmbeddingRequest {
    entityId: number;
}

export interface GetEmbeddingByIdRequest {
    entityId: number;
}

export interface GetEmbeddingListRequest {
    embeddingId?: number;
    filters?: string;
    orderBy?: string;
    order?: GetEmbeddingListOrderEnum;
    page?: number;
    pageSize?: number;
    indexName?: string;
}

/**
 * 
 */
export class EmbeddingApi extends runtime.BaseAPI {

    /**
     * Create a new embedding
     */
    async createEmbeddingRaw(requestParameters: CreateEmbeddingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Embedding>> {
        if (requestParameters.embeddingCreate === null || requestParameters.embeddingCreate === undefined) {
            throw new runtime.RequiredError('embeddingCreate','Required parameter requestParameters.embeddingCreate was null or undefined when calling createEmbedding.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bearerAuth", ["embedding:w"]);
        }

        const response = await this.request({
            path: `/embedding`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmbeddingCreateToJSON(requestParameters.embeddingCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmbeddingFromJSON(jsonValue));
    }

    /**
     * Create a new embedding
     */
    async createEmbedding(requestParameters: CreateEmbeddingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Embedding> {
        const response = await this.createEmbeddingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a single embedding by ID
     */
    async deleteEmbeddingRaw(requestParameters: DeleteEmbeddingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Embedding>> {
        if (requestParameters.entityId === null || requestParameters.entityId === undefined) {
            throw new runtime.RequiredError('entityId','Required parameter requestParameters.entityId was null or undefined when calling deleteEmbedding.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bearerAuth", ["embedding:w"]);
        }

        const response = await this.request({
            path: `/embedding/{entity_id}`.replace(`{${"entity_id"}}`, encodeURIComponent(String(requestParameters.entityId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmbeddingFromJSON(jsonValue));
    }

    /**
     * Delete a single embedding by ID
     */
    async deleteEmbedding(requestParameters: DeleteEmbeddingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Embedding> {
        const response = await this.deleteEmbeddingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a single embedding by ID
     */
    async getEmbeddingByIdRaw(requestParameters: GetEmbeddingByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Embedding>> {
        if (requestParameters.entityId === null || requestParameters.entityId === undefined) {
            throw new runtime.RequiredError('entityId','Required parameter requestParameters.entityId was null or undefined when calling getEmbeddingById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bearerAuth", ["embedding:r"]);
        }

        const response = await this.request({
            path: `/embedding/{entity_id}`.replace(`{${"entity_id"}}`, encodeURIComponent(String(requestParameters.entityId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmbeddingFromJSON(jsonValue));
    }

    /**
     * Get a single embedding by ID
     */
    async getEmbeddingById(requestParameters: GetEmbeddingByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Embedding> {
        const response = await this.getEmbeddingByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of embeddings
     */
    async getEmbeddingListRaw(requestParameters: GetEmbeddingListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEmbeddingList200Response>> {
        const queryParameters: any = {};

        if (requestParameters.embeddingId !== undefined) {
            queryParameters['embedding_id'] = requestParameters.embeddingId;
        }

        if (requestParameters.filters !== undefined) {
            queryParameters['filters'] = requestParameters.filters;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['order_by'] = requestParameters.orderBy;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.indexName !== undefined) {
            queryParameters['index_name'] = requestParameters.indexName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bearerAuth", ["embedding:r"]);
        }

        const response = await this.request({
            path: `/embedding`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetEmbeddingList200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of embeddings
     */
    async getEmbeddingList(requestParameters: GetEmbeddingListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEmbeddingList200Response> {
        const response = await this.getEmbeddingListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetEmbeddingListOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type GetEmbeddingListOrderEnum = typeof GetEmbeddingListOrderEnum[keyof typeof GetEmbeddingListOrderEnum];
