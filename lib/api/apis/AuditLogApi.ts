/* tslint:disable */
/* eslint-disable */
/**
 * SRE DynamoDB Table definition - OpenAPI 3.0
 * DynamoDB Data doc for SRE Project
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuditLog,
  AuditLogCreate,
  GetAuditLogList200Response,
} from '../models';
import {
    AuditLogFromJSON,
    AuditLogToJSON,
    AuditLogCreateFromJSON,
    AuditLogCreateToJSON,
    GetAuditLogList200ResponseFromJSON,
    GetAuditLogList200ResponseToJSON,
} from '../models';

export interface CreateAuditLogRequest {
    auditLogCreate: AuditLogCreate;
}

export interface DeleteAuditLogRequest {
    entityId: number;
}

export interface GetAuditLogByIdRequest {
    entityId: number;
}

export interface GetAuditLogListRequest {
    auditLogId?: number;
    filters?: string;
    orderBy?: string;
    order?: GetAuditLogListOrderEnum;
    page?: number;
    pageSize?: number;
    indexName?: string;
}

/**
 * 
 */
export class AuditLogApi extends runtime.BaseAPI {

    /**
     * Create a new audit-log
     */
    async createAuditLogRaw(requestParameters: CreateAuditLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuditLog>> {
        if (requestParameters.auditLogCreate === null || requestParameters.auditLogCreate === undefined) {
            throw new runtime.RequiredError('auditLogCreate','Required parameter requestParameters.auditLogCreate was null or undefined when calling createAuditLog.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bearerAuth", ["audit-log:w"]);
        }

        const response = await this.request({
            path: `/audit-log`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuditLogCreateToJSON(requestParameters.auditLogCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuditLogFromJSON(jsonValue));
    }

    /**
     * Create a new audit-log
     */
    async createAuditLog(requestParameters: CreateAuditLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuditLog> {
        const response = await this.createAuditLogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a single audit-log by ID
     */
    async deleteAuditLogRaw(requestParameters: DeleteAuditLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuditLog>> {
        if (requestParameters.entityId === null || requestParameters.entityId === undefined) {
            throw new runtime.RequiredError('entityId','Required parameter requestParameters.entityId was null or undefined when calling deleteAuditLog.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bearerAuth", ["audit-log:w"]);
        }

        const response = await this.request({
            path: `/audit-log/{entity_id}`.replace(`{${"entity_id"}}`, encodeURIComponent(String(requestParameters.entityId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuditLogFromJSON(jsonValue));
    }

    /**
     * Delete a single audit-log by ID
     */
    async deleteAuditLog(requestParameters: DeleteAuditLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuditLog> {
        const response = await this.deleteAuditLogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a single audit-log by ID
     */
    async getAuditLogByIdRaw(requestParameters: GetAuditLogByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuditLog>> {
        if (requestParameters.entityId === null || requestParameters.entityId === undefined) {
            throw new runtime.RequiredError('entityId','Required parameter requestParameters.entityId was null or undefined when calling getAuditLogById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bearerAuth", ["audit-log:r"]);
        }

        const response = await this.request({
            path: `/audit-log/{entity_id}`.replace(`{${"entity_id"}}`, encodeURIComponent(String(requestParameters.entityId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuditLogFromJSON(jsonValue));
    }

    /**
     * Get a single audit-log by ID
     */
    async getAuditLogById(requestParameters: GetAuditLogByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuditLog> {
        const response = await this.getAuditLogByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of audit-logs
     */
    async getAuditLogListRaw(requestParameters: GetAuditLogListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAuditLogList200Response>> {
        const queryParameters: any = {};

        if (requestParameters.auditLogId !== undefined) {
            queryParameters['audit-log_id'] = requestParameters.auditLogId;
        }

        if (requestParameters.filters !== undefined) {
            queryParameters['filters'] = requestParameters.filters;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['order_by'] = requestParameters.orderBy;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.indexName !== undefined) {
            queryParameters['index_name'] = requestParameters.indexName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bearerAuth", ["audit-log:r"]);
        }

        const response = await this.request({
            path: `/audit-log`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAuditLogList200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of audit-logs
     */
    async getAuditLogList(requestParameters: GetAuditLogListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAuditLogList200Response> {
        const response = await this.getAuditLogListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetAuditLogListOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type GetAuditLogListOrderEnum = typeof GetAuditLogListOrderEnum[keyof typeof GetAuditLogListOrderEnum];
