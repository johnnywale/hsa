/* tslint:disable */
/* eslint-disable */
/**
 * SRE DynamoDB Table definition - OpenAPI 3.0
 * DynamoDB Data doc for SRE Project
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetModelList200Response,
  Model,
  ModelCreate,
} from '../models';
import {
    GetModelList200ResponseFromJSON,
    GetModelList200ResponseToJSON,
    ModelFromJSON,
    ModelToJSON,
    ModelCreateFromJSON,
    ModelCreateToJSON,
} from '../models';

export interface CreateModelRequest {
    modelCreate: ModelCreate;
}

export interface DeleteModelRequest {
    entityId: number;
}

export interface GetModelByIdRequest {
    entityId: number;
}

export interface GetModelListRequest {
    modelId?: number;
    filters?: string;
    orderBy?: string;
    order?: GetModelListOrderEnum;
    page?: number;
    pageSize?: number;
    indexName?: string;
}

/**
 * 
 */
export class ModelApi extends runtime.BaseAPI {

    /**
     * Create a new model
     */
    async createModelRaw(requestParameters: CreateModelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Model>> {
        if (requestParameters.modelCreate === null || requestParameters.modelCreate === undefined) {
            throw new runtime.RequiredError('modelCreate','Required parameter requestParameters.modelCreate was null or undefined when calling createModel.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bearerAuth", ["model:w"]);
        }

        const response = await this.request({
            path: `/model`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelCreateToJSON(requestParameters.modelCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelFromJSON(jsonValue));
    }

    /**
     * Create a new model
     */
    async createModel(requestParameters: CreateModelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Model> {
        const response = await this.createModelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a single model by ID
     */
    async deleteModelRaw(requestParameters: DeleteModelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Model>> {
        if (requestParameters.entityId === null || requestParameters.entityId === undefined) {
            throw new runtime.RequiredError('entityId','Required parameter requestParameters.entityId was null or undefined when calling deleteModel.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bearerAuth", ["model:w"]);
        }

        const response = await this.request({
            path: `/model/{entity_id}`.replace(`{${"entity_id"}}`, encodeURIComponent(String(requestParameters.entityId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelFromJSON(jsonValue));
    }

    /**
     * Delete a single model by ID
     */
    async deleteModel(requestParameters: DeleteModelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Model> {
        const response = await this.deleteModelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a single model by ID
     */
    async getModelByIdRaw(requestParameters: GetModelByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Model>> {
        if (requestParameters.entityId === null || requestParameters.entityId === undefined) {
            throw new runtime.RequiredError('entityId','Required parameter requestParameters.entityId was null or undefined when calling getModelById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bearerAuth", ["model:r"]);
        }

        const response = await this.request({
            path: `/model/{entity_id}`.replace(`{${"entity_id"}}`, encodeURIComponent(String(requestParameters.entityId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelFromJSON(jsonValue));
    }

    /**
     * Get a single model by ID
     */
    async getModelById(requestParameters: GetModelByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Model> {
        const response = await this.getModelByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of models
     */
    async getModelListRaw(requestParameters: GetModelListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetModelList200Response>> {
        const queryParameters: any = {};

        if (requestParameters.modelId !== undefined) {
            queryParameters['model_id'] = requestParameters.modelId;
        }

        if (requestParameters.filters !== undefined) {
            queryParameters['filters'] = requestParameters.filters;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['order_by'] = requestParameters.orderBy;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.indexName !== undefined) {
            queryParameters['index_name'] = requestParameters.indexName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bearerAuth", ["model:r"]);
        }

        const response = await this.request({
            path: `/model`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetModelList200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of models
     */
    async getModelList(requestParameters: GetModelListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetModelList200Response> {
        const response = await this.getModelListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetModelListOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type GetModelListOrderEnum = typeof GetModelListOrderEnum[keyof typeof GetModelListOrderEnum];
